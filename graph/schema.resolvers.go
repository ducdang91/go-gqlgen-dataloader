package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.22

import (
	"context"
	"github.com/ducdang91/go-gqlgen-dataloader/graph/model"
	"github.com/ducdang91/go-gqlgen-dataloader/service"
)

// User is the resolver for the user field.
func (r *mutationResolver) User(ctx context.Context) (*model.UserOps, error) {
	return &model.UserOps{}, nil
}

// Transaction is the resolver for the transaction field.
func (r *mutationResolver) Transaction(ctx context.Context) (*model.TransactionOps, error) {
	return &model.TransactionOps{}, nil
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context) ([]*model.User, error) {
	return service.UserGetAll(ctx)
}

// Transactions is the resolver for the transactions field.
func (r *queryResolver) Transactions(ctx context.Context) ([]*model.Transaction, error) {
	return service.TransactionGetAll(ctx)
}

// TransactionDetails is the resolver for the transaction_details field.
func (r *queryResolver) TransactionDetails(ctx context.Context) ([]*model.TransactionDetail, error) {
	return service.TransactionDetailGetAll(ctx)
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }